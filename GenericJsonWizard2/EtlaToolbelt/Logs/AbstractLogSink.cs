// --------------------------------------------------------------------------------------------------
//	This code was generated by the ETLA Toolbelt Wizard version 1.0.59.11
//	Generated date: 2021-Mar-04 16:30:31
//
//	Changes to this file will be lost if the code is regenerated.
//	To make changes or additions, rerun the ETLA Toolbelt Wizard after editing T4 templates if required
// --------------------------------------------------------------------------------------------------

namespace GenericJsonSuite.EtlaToolbelt.Logs;

/// <summary>Default implementations of the ILogSink
/// </summary>
public abstract class AbstractLogSink : ILogSink
{
    /// <summary>Defines which messages are sent to the sink and which are ignored
    /// <see cref="LogLevel"/> for further details (but note that this is a set of flags and not an integer)
    /// </summary>
    public LogLevel LevelToShow { get; set; }

    /// <summary>Allows multiple sinks of one type to be defined</summary>
    public int Instance { get; set; }

    /// <summary>Returns true if a log message with this LogLevel is sent or ignored</summary>
    /// <param name="level">The LogLevel of a message</param>
    /// <returns><c>true</c> if a log message with this LogLevel is to be sent; <c>false</c> otherwise</returns>
    public bool Shows(LogLevel level)
    {
        bool answer = (level & LevelToShow) != LogLevel.NONE;
        return answer;
    }

    /// <summary>Writes the log message to the sink's medium</summary>
    /// <param name="logMessage">The log message to write</param>
    public abstract void Write(LogMessage logMessage);

    /// <summary>Translates a structured LogMessage into a string relevant for this sink meduim</summary>
    /// <param name="logMessage">The log message to format</param>
    /// <returns>The string containing the formatted log message</returns>
    public virtual string Format(LogMessage logMessage)
    {
        var filename = Path.GetFileNameWithoutExtension(logMessage.Path);
        var prefix = $"{logMessage.Stamp:yyyyMMdd HH:mm:ss.ff}|{logMessage.Level}";
        var location = $"{filename}:{logMessage.Line} {logMessage.Caller}";

        switch (logMessage.Level)
        {
            case LogLevel.START:
                string cmdLine;
                var check = Type.GetType("GenericFeedSuite.EtlaToolbelt.CmdLines._CmdLine");
                if (check == null) { cmdLine = Environment.CommandLine; } else { cmdLine = CmdLine.GetCmdLine(); }
                return $"{new string('=', 80)}\n"
                    + $"{prefix}|Running\n"
                    + $"\t{cmdLine}\n"
                    + $"\ton {Environment.MachineName} as {Context.UserDomain}\\{Context.UserName}\n"
                    + $"\tin environment '{Context.Env}'"
                    ;

            case LogLevel.FINISH:
                return $"{prefix}|Exiting Process\n{new string('=', 80)}";
            default:
                return $"{prefix}|{location}|{logMessage.Msg}" + (logMessage.E == null ? "" : $"\n\t{logMessage.E}");
        }
    }
}