// --------------------------------------------------------------------------------------------------
//	This code was generated by the ETLA Toolbelt Wizard version 1.0.59.11
//	Generated date: 2021-Mar-04 16:30:31
//
//	Changes to this file will be lost if the code is regenerated.
//	To make changes or additions, rerun the ETLA Toolbelt Wizard after editing T4 templates if required
// --------------------------------------------------------------------------------------------------

using System.Diagnostics;

namespace GenericJsonSuite.EtlaToolbelt.Logs;

/// <summary>The implementation of a Log Sink which sends log messages to a file</summary>
public class FileSink : AbstractLogSink
{
    private string _Filepath { get; set; }

    /// <summary>Standard Constructor</summary>
    /// <param name="levelToShow">Indication of which messages to append to file and which to ignore</param>
    /// <param name="instance">A mechanism for allowing multiple FileSinks for messages</param>
    public FileSink(LogLevel levelToShow, int instance)
    {
        LevelToShow = levelToShow;
        Instance = instance;
        _Filepath = GetFilePath(instance);
    }

    /// <summary>Appends the log message to the file</summary>
    /// <param name="logMessage">The log message to append</param>
    public override void Write(LogMessage logMessage)
    {
        try
        {
            var message = Format(logMessage);
            using (StreamWriter stream = File.AppendText(_Filepath))
            {
                stream.WriteLine(message);
            }
        }
        catch (Exception ex)
        {

            string failureMessage = $"The following exception was thrown while attempting to write to a log file:{_Filepath}\n\t{ex.Message}";
            Trace.WriteLine(failureMessage);
            Log.IgnoreExceptInDev(ex);
        }
    }

    /// <summary>Translates a structured LogMessage into a string relevant for this sink meduim</summary>
    /// <param name="logMessage">The log message to format</param>
    /// <returns>The string containing the formatted log message</returns>
    public override string Format(LogMessage logMessage)
    {
        LogLevel level = logMessage.Level;

        switch (Instance)
        {
            case 0:
                switch (level)
                {
                    default:
                        return base.Format(logMessage);
                }
            default:
                return base.Format(logMessage);
        }
    }

    /// <summary>Constructs a file path for this FileSink instance</summary>
    /// <param name="instance">A unique identifier for this FileSink instance</param>
    /// <returns>The file path for this FileSink instance</returns>
    /// <exception cref="Exception"> thrown if the file coud not be created</exception>
    private static string GetFilePath(int instance)
    {
        string dir;
        var app = Context.App;
        switch (instance)
        {
            case 0:
                dir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), app);
                Directory.CreateDirectory(dir);
                return Path.Combine(dir, app + ".log");
            default:
                throw new Exception("Internal error: File Sink index not matched");
        }
    }
}