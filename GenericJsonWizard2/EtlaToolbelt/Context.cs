using GenericJsonSuite.EtlaToolbelt.Contexts;
using GenericJsonSuite.EtlaToolbelt.Infrastructure;
using System.Reflection;
using System.Runtime.InteropServices;

// --------------------------------------------------------------------------------------------------
//	This code was generated by the ETLA Toolbelt Wizard version 1.0.59.11
//	Generated date: 2021-Mar-04 16:30:31
//
//	Changes to this file will be lost if the code is regenerated.
//	To make changes or additions, rerun the ETLA Toolbelt Wizard after editing T4 templates if required
// --------------------------------------------------------------------------------------------------

namespace GenericJsonSuite.EtlaToolbelt;

/// <summary>An API for the implementation of code to get application context information
/// The precise algorithms for getting this information depend on the current implementation
/// To change the implementation, use the following pattern
///     IContext imp = new AnotherIContextImplementation(); 
///     Context.Implementation = imp;
/// See <see cref="_Context"/> for the default implementation
/// </summary>
public abstract class Context : Fascia<IContext, _Context>
{
    /// <summary>The name of the environment the application is running in (e.g. "DEV")</summary>
    public static string Env { get => Implementation.Env; set => Implementation.Env = value; }

    /// <summary>The name of the application</summary>
    public static string App { get => Implementation.App; set => Implementation.App = value; }

    /// <summary>The name of the account running the application</summary>
    public static string UserName => Implementation.UserName;

    /// <summary>The "domain" the application is running in (usually company name or similar)</summary>
    public static string UserDomain => Implementation.UserDomain;

    /// <summary>Reports on whether the environment the application is running in is a "development" environment (e.g. on a programmers machine)</summary>
    /// <returns><c>true</c> if the environment appears to be a development environment; <c>false</c> otherwise</returns>
    public static bool IsDev() => Implementation.IsDev();

    /// <summary>Reports on whether the environment the application is running in is a "production" environment (i.e. not development or test, but live)</summary>
    /// <returns><c>true</c> if the environment appears to be a production environment; <c>false</c> otherwise</returns>
    public static bool IsProduction() => Implementation.IsProduction();

    /// <summary>The GUID asociated with the Assembly (as a string)</summary>
    public static string? AppGuidString { get { return Assembly.GetExecutingAssembly()?.GetCustomAttribute<GuidAttribute>()?.Value; } }

    /// <summary>The GUID asociated with the Assembly</summary>
    public static Guid? AppGuid { get; set; } = AppGuidString == null ? (Guid?)null : new Guid(AppGuidString);
}
