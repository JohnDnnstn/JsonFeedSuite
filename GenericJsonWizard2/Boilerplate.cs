using GenericJsonWizard.BackingData;
using GenericJsonWizard.Models;
using System;
using System.Text;
using System.Text.Json;

namespace GenericJsonWizard;

internal static class Boilerplate
{
    internal static string GenerateTargetSql()
    {
        StringBuilder builder = new();
        int indent = 0;

        foreach (var col in ChosenData.GetAllVisibleJsonColumns(showJsonEntities: true))
        {
            if (col.JsonType == JsonValueKind.Object || col.JsonType == JsonValueKind.Array)
            {
                var model = new TypeModel(col);
                builder.AppendLine(model.Defn(indent));
            }
        }

        foreach (DomainTableData domain in ChosenData.DomainTables)
        {
            var model = new DomainTableModel(domain);
            builder.Append(model.Defn(true));
        }

        foreach (ForeignTableData foreign in ChosenData.ForeignTables)
        {
            var model = new ForeignTableModel(foreign);
            builder.Append(model.Defn(true));
        }

        foreach (OtherTableData other in ChosenData.OtherTables)
        {
            var model = new OtherTableModel(other);
            builder.Append(model.Defn(true));
        }
        return builder.ToString();
    }

    internal static string GenerateStagingSql()
    {
        StringBuilder builder = new();
        int indent = 0;

        builder.AppendLine("----------------------------------------------------------------------------------");
        builder.AppendLine($"--\tThis SQL script was generated by GenericFeedWizard.  Created: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        builder.AppendLine($"--\tAny changes you make will be lost if you re-run GenericFeedWizard.");
        builder.AppendLine("----------------------------------------------------------------------------------");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Process function
        //

        //  Preamble and definition
        builder.AppendLine();
        builder.AppendLine($"CREATE OR REPLACE PROCEDURE {ChosenData.QualifiedProcessProc}(_load_id INTEGER, _args VARCHAR)");
        builder.AppendLine("LANGUAGE plpgsql");
        builder.AppendLine("SECURITY DEFINER");
        builder.AppendLine("AS $procedure$");
        builder.AppendLine("DECLARE");
        builder.AppendLine($"\t_feed_name varchar := '{ChosenData.FeedDetails.FeedFullName}';");
        builder.AppendLine("\t_jsonArgs jsonb:= cast(_args as jsonb);");
        builder.AppendLine("\t_bad_count int;");
        builder.AppendLine("BEGIN");
        ++indent;

        // Domains
        foreach (var domain in ChosenData.DomainTables)
        {
            DomainTableModel model = new(domain);
            builder.AppendLine(model.CheckValues(indent));
        }

        //// Foreign Tables
        //foreach (var foreign in ChosenData.ForeignTables)
        //{
        //    ForeignTableModel model = new(foreign);
        //    builder.Append(model.Populate(indent));
        //}

        //// MultiMapped Tables
        //foreach (var multi in ChosenData.MultiMappedTables)
        //{
        //    MultiMapTableModel model = new(multi);
        //    builder.Append(model.Populate(indent));
        //}

        //// OtherTables
        //foreach (var other in ChosenData.OtherTables)
        //{
        //    OtherTableModel model = new(other);
        //    builder.AppendLine(model.Populate(indent));
        //}

        //if (!ChosenData.HasDataSourcesTable && ChosenData.DataSourceDetails.FinishedAt)
        //{
        //    builder.AppendLine($"--Note the finish time (it won't be identical to that in {ChosenData.StagingSchema}._loads)");
        //    builder.AppendLine("--");
        //    builder.AppendLine($"\t{ChosenData.QualifiedDataSourcesTable} SET finished_at = clock_timestamp();");
        //    builder.AppendLine();
        //}

        builder.AppendLine("END;");
        builder.AppendLine("$procedure$;");
        builder.AppendLine();
        builder.AppendLine($"ALTER PROCEDURE {ChosenData.QualifiedProcessProc}(INT, VARCHAR) OWNER TO {ChosenData.Roles.StagingOwner};");
        builder.AppendLine($"GRANT execute ON PROCEDURE {ChosenData.QualifiedProcessProc}(INT, VARCHAR) to {ChosenData.Roles.LoaderRole};");
        builder.AppendLine();
        builder.AppendLine();

        return builder.ToString();

    }

    internal static string GenerateTargetSchema()
    {
        StringBuilder builder = new();
        return builder.ToString();
    }
}
